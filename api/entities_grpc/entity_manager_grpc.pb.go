// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: components/entity_manager.proto

package components

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EntityManager_PublishEntity_FullMethodName        = "/components.EntityManager/PublishEntity"
	EntityManager_PublishEntities_FullMethodName      = "/components.EntityManager/PublishEntities"
	EntityManager_GetEntity_FullMethodName            = "/components.EntityManager/GetEntity"
	EntityManager_OverrideEntity_FullMethodName       = "/components.EntityManager/OverrideEntity"
	EntityManager_RemoveEntityOverride_FullMethodName = "/components.EntityManager/RemoveEntityOverride"
)

// EntityManagerClient is the client API for EntityManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityManagerClient interface {
	PublishEntity(ctx context.Context, in *PublishEntityRequest, opts ...grpc.CallOption) (*PublishEntityResponse, error)
	PublishEntities(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Entity, PublishEntitiesResponse], error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	OverrideEntity(ctx context.Context, in *OverrideEntityRequest, opts ...grpc.CallOption) (*OverrideEntityResponse, error)
	RemoveEntityOverride(ctx context.Context, in *RemoveEntityOverrideRequest, opts ...grpc.CallOption) (*RemoveEntityOverrideResponse, error)
}

type entityManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityManagerClient(cc grpc.ClientConnInterface) EntityManagerClient {
	return &entityManagerClient{cc}
}

func (c *entityManagerClient) PublishEntity(ctx context.Context, in *PublishEntityRequest, opts ...grpc.CallOption) (*PublishEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishEntityResponse)
	err := c.cc.Invoke(ctx, EntityManager_PublishEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityManagerClient) PublishEntities(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Entity, PublishEntitiesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EntityManager_ServiceDesc.Streams[0], EntityManager_PublishEntities_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Entity, PublishEntitiesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EntityManager_PublishEntitiesClient = grpc.ClientStreamingClient[Entity, PublishEntitiesResponse]

func (c *entityManagerClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, EntityManager_GetEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityManagerClient) OverrideEntity(ctx context.Context, in *OverrideEntityRequest, opts ...grpc.CallOption) (*OverrideEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverrideEntityResponse)
	err := c.cc.Invoke(ctx, EntityManager_OverrideEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityManagerClient) RemoveEntityOverride(ctx context.Context, in *RemoveEntityOverrideRequest, opts ...grpc.CallOption) (*RemoveEntityOverrideResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveEntityOverrideResponse)
	err := c.cc.Invoke(ctx, EntityManager_RemoveEntityOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityManagerServer is the server API for EntityManager service.
// All implementations must embed UnimplementedEntityManagerServer
// for forward compatibility.
type EntityManagerServer interface {
	PublishEntity(context.Context, *PublishEntityRequest) (*PublishEntityResponse, error)
	PublishEntities(grpc.ClientStreamingServer[Entity, PublishEntitiesResponse]) error
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	OverrideEntity(context.Context, *OverrideEntityRequest) (*OverrideEntityResponse, error)
	RemoveEntityOverride(context.Context, *RemoveEntityOverrideRequest) (*RemoveEntityOverrideResponse, error)
	mustEmbedUnimplementedEntityManagerServer()
}

// UnimplementedEntityManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntityManagerServer struct{}

func (UnimplementedEntityManagerServer) PublishEntity(context.Context, *PublishEntityRequest) (*PublishEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEntity not implemented")
}
func (UnimplementedEntityManagerServer) PublishEntities(grpc.ClientStreamingServer[Entity, PublishEntitiesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PublishEntities not implemented")
}
func (UnimplementedEntityManagerServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedEntityManagerServer) OverrideEntity(context.Context, *OverrideEntityRequest) (*OverrideEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideEntity not implemented")
}
func (UnimplementedEntityManagerServer) RemoveEntityOverride(context.Context, *RemoveEntityOverrideRequest) (*RemoveEntityOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntityOverride not implemented")
}
func (UnimplementedEntityManagerServer) mustEmbedUnimplementedEntityManagerServer() {}
func (UnimplementedEntityManagerServer) testEmbeddedByValue()                       {}

// UnsafeEntityManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityManagerServer will
// result in compilation errors.
type UnsafeEntityManagerServer interface {
	mustEmbedUnimplementedEntityManagerServer()
}

func RegisterEntityManagerServer(s grpc.ServiceRegistrar, srv EntityManagerServer) {
	// If the following call pancis, it indicates UnimplementedEntityManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EntityManager_ServiceDesc, srv)
}

func _EntityManager_PublishEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityManagerServer).PublishEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityManager_PublishEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityManagerServer).PublishEntity(ctx, req.(*PublishEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityManager_PublishEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EntityManagerServer).PublishEntities(&grpc.GenericServerStream[Entity, PublishEntitiesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EntityManager_PublishEntitiesServer = grpc.ClientStreamingServer[Entity, PublishEntitiesResponse]

func _EntityManager_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityManagerServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityManager_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityManagerServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityManager_OverrideEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityManagerServer).OverrideEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityManager_OverrideEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityManagerServer).OverrideEntity(ctx, req.(*OverrideEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityManager_RemoveEntityOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityManagerServer).RemoveEntityOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityManager_RemoveEntityOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityManagerServer).RemoveEntityOverride(ctx, req.(*RemoveEntityOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityManager_ServiceDesc is the grpc.ServiceDesc for EntityManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "components.EntityManager",
	HandlerType: (*EntityManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishEntity",
			Handler:    _EntityManager_PublishEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _EntityManager_GetEntity_Handler,
		},
		{
			MethodName: "OverrideEntity",
			Handler:    _EntityManager_OverrideEntity_Handler,
		},
		{
			MethodName: "RemoveEntityOverride",
			Handler:    _EntityManager_RemoveEntityOverride_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishEntities",
			Handler:       _EntityManager_PublishEntities_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "components/entity_manager.proto",
}
